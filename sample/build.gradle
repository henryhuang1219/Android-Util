import me.lazy_assedninja.plugins.*

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-allopen'
    id 'androidx.navigation.safeargs.kotlin'
}

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'me.lazy_assedninja.library_dagger.testing.OpenClass'
}

android {
    compileSdkVersion ConfigVersions.compileSdkVersion
    buildToolsVersion ConfigVersions.buildToolsVersion

    defaultConfig {
        applicationId "me.lazy_assedninja.utils"
        minSdkVersion ConfigVersions.minSampleSdkVersion
        targetSdkVersion ConfigVersions.targetSdkVersion
        versionCode ConfigVersions.versionCode
        versionName ConfigVersions.versionName

        testInstrumentationRunner "me.lazy_assedninja.sample.utils.UtilsTestRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }

    buildFeatures {
        dataBinding true
    }

    packagingOptions {
        pickFirst 'META-INF/AL2.0'
        pickFirst 'META-INF/LGPL2.1'
    }
}

dependencies {
    implementation AndroidX.appCompat
    implementation AndroidX.constraintLayout
    implementation AndroidX.core
    implementation Google.material
    implementation Kotlin.stdlib

    // Modules
    implementation project(path: ':library_dagger')

    // Lifecycle
    implementation AndroidX.lifecycleJava8

    // Coroutines
    testImplementation Kotlin.coroutinesTest
    androidTestImplementation Kotlin.coroutinesTest

    // Navigation
    implementation AndroidX.navigationFragmentKotlin
    implementation AndroidX.navigationUIKotlin

    // Dagger
    implementation Google.dagger
    kapt Google.daggerCompiler

    // Gson
    implementation Google.gson

    // Glide
    implementation ThirdParty.glide
    kapt ThirdParty.glideCompiler

    // EasyPermission
    implementation Google.easyPermission

    // Arch Core
    testImplementation AndroidX.archCoreTesting
    androidTestImplementation AndroidX.archCoreTesting

    // Test Core
    androidTestImplementation AndroidX.testCore

    // Junit
    testImplementation Junit.junit
    androidTestImplementation AndroidX.testJunit

    // Mockito
    testImplementation Mockito.mockitoCore
    androidTestImplementation Mockito.mockitoCore
    androidTestImplementation Mockito.mockitoAndroid

    // Espresso
    androidTestImplementation AndroidX.testEspresso
}

// we need all open to run tests which we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}